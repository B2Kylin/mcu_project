C51 COMPILER V9.56.0.0   PDIUSBD12                                                         09/17/2017 22:48:44 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PDIUSBD12
OBJECT MODULE PLACED IN .\Objects\PDIUSBD12.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\PDIUSBD12.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\PDIUSBD12.lst) TABS(2) OBJECT(.\Objects\PDIUSBD12.obj)

line level    source

   1          /******************************************************************
   2             本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3          
   4                  欢迎访问我的USB专区：http://group.ednchina.com/93/
   5                  欢迎访问我的blog：   http://www.ednchina.com/blog/computer00
   6                                       http://computer00.21ic.org
   7          
   8                  感谢PCB赞助商——电子园： http://bbs.cepark.com/
   9          
  10          PDIUSBD12.C  file
  11          
  12          作者：电脑圈圈
  13          建立日期: 2008.06.27
  14          修改日期: 2008.07.10
  15          版本：V1.1
  16          版权所有，盗版必究。
  17          Copyright(C) 电脑圈圈 2008-2018
  18          All rights reserved            
  19          *******************************************************************/
  20          
  21          #include <reg52.H>
  22          #include "include/MyType.h"
  23          #include "include/PDIUSBD12.H"
  24          #include "include/config.h"
  25          #include "include/uart.h"
  26          
  27          /********************************************************************
  28          函数功能：D12写命令。
  29          入口参数：Command：一字节命令。
  30          返    回：无。
  31          备    注：无。
  32          ********************************************************************/
  33          void D12WriteCommand(uint8 Command)
  34          {
  35   1       D12SetCommandAddr();  //设置为命令地址
  36   1       D12ClrWr(); //WR置低 
  37   1       D12SetPortOut(); //将数据口设置为输出状态（注意这里为空宏，移植时可能有用）
  38   1       D12SetData(Command);  //输出命令到数据口上
  39   1       D12SetWr(); //WR置高
  40   1       D12SetPortIn(); //将数据口设置为输入状态，以备后面输入使用
  41   1      }
  42          ////////////////////////End of function//////////////////////////////
  43          
  44          /********************************************************************
  45          函数功能：读一字节D12数据。
  46          入口参数：无。
  47          返    回：读回的一字节。
  48          备    注：无。
  49          ********************************************************************/
  50          uint8 D12ReadByte(void)
  51          {
  52   1       uint8 temp;
  53   1       D12SetDataAddr(); //设置为数据地址
  54   1       D12ClrRd(); //RD置低
C51 COMPILER V9.56.0.0   PDIUSBD12                                                         09/17/2017 22:48:44 PAGE 2   

  55   1       temp=D12GetData(); //读回数据
  56   1       D12SetRd(); //RD置高
  57   1       return temp; //返回读到数据
  58   1      }
  59          ////////////////////////End of function//////////////////////////////
  60          
  61          /********************************************************************
  62          函数功能：读D12的ID。
  63          入口参数：无。
  64          返    回：D12的ID。
  65          备    注：无。
  66          ********************************************************************/
  67          uint16 D12ReadID(void)
  68          {
  69   1       uint16 id;
  70   1       D12WriteCommand(Read_ID); //写读ID命令
  71   1       id=D12ReadByte(); //读回ID号低字节
  72   1       id|=((uint16)D12ReadByte())<<8; //读回ID号高字节
  73   1       return id;
  74   1      }
  75          ////////////////////////End of function//////////////////////////////
  76          
  77          /********************************************************************
  78          函数功能：写一字节D12数据。
  79          入口参数：Value：要写的一字节数据。
  80          返    回：无。
  81          备    注：无。
  82          ********************************************************************/
  83          void D12WriteByte(uint8 Value)
  84          {
  85   1       D12SetDataAddr(); //设置为数据地址
  86   1       D12ClrWr(); //WR置低
  87   1       D12SetPortOut(); //将数据口设置为输出状态（注意这里为空宏，移植时可能有用）
  88   1       D12SetData(Value); //写出数据
  89   1       D12SetWr(); //WR置高
  90   1       D12SetPortIn(); //将数据口设置为输入状态，以备后面输入使用
  91   1      }
  92          ////////////////////////End of function//////////////////////////////
  93          
  94          /********************************************************************
  95          函数功能：读取D12最后传输状态寄存器的函数。
  96          入口参数：Endp：端点号。
  97          返    回：端点的最后传输状态。
  98          备    注：该操作将清除该端点的中断标志位。
  99          ********************************************************************/
 100          uint8 D12ReadEndpointLastStatus(uint8 Endp)
 101          {
 102   1       D12WriteCommand(0x40+Endp); //读取端点最后状态的命令
 103   1       return D12ReadByte();
 104   1      }
 105          ////////////////////////End of function//////////////////////////////
 106          
 107          /********************************************************************
 108          函数功能：选择端点的函数，选择一个端点后才能对它进行数据操作。
 109          入口参数：Endp：端点号。
 110          返    回：无。
 111          备    注：无。
 112          ********************************************************************/
 113          void D12SelectEndpoint(uint8 Endp)
 114          {
 115   1       D12WriteCommand(0x00+Endp); //选择端点的命令
 116   1      }
C51 COMPILER V9.56.0.0   PDIUSBD12                                                         09/17/2017 22:48:44 PAGE 3   

 117          ////////////////////////End of function//////////////////////////////
 118          
 119          /********************************************************************
 120          函数功能：清除接收端点缓冲区的函数。
 121          入口参数：无。
 122          返    回：无。
 123          备    注：只有使用该函数清除端点缓冲后，该接收端点才能接收新的数据包。
 124          ********************************************************************/
 125          void D12ClearBuffer(void)
 126          {
 127   1       D12WriteCommand(D12_CLEAR_BUFFER);
 128   1      }
 129          ////////////////////////End of function//////////////////////////////
 130          
 131          /********************************************************************
 132          函数功能：应答建立包的函数。
 133          入口参数：无。
 134          返    回：无。
 135          备    注：无。
 136          ********************************************************************/
 137          void D12AcknowledgeSetup(void)
 138          {
 139   1       D12SelectEndpoint(1); //选择端点0输入
 140   1       D12WriteCommand(D12_ACKNOWLEDGE_SETUP); //发送应答设置到端点0输入
 141   1       D12SelectEndpoint(0); //选择端点0输出
 142   1       D12WriteCommand(D12_ACKNOWLEDGE_SETUP); //发送应答设置到端点0输出
 143   1      }
 144          ////////////////////////End of function//////////////////////////////
 145          
 146          /********************************************************************
 147          函数功能：读取端点缓冲区函数。
 148          入口参数：Endp：端点号；Len：需要读取的长度；Buf：保存数据的缓冲区。
 149          返    回：实际读到的数据长度。
 150          备    注：无。
 151          ********************************************************************/
 152          uint8 D12ReadEndpointBuffer(uint8 Endp, uint8 Len, uint8 *Buf)
 153          {
 154   1       uint8 i,j;
 155   1       D12SelectEndpoint(Endp); //选择要操作的端点缓冲
 156   1       D12WriteCommand(D12_READ_BUFFER); //发送读缓冲区的命令
 157   1       D12ReadByte();   //该字节数据是保留的，不用。
 158   1       j=D12ReadByte(); //这里才是实际的接收到的数据长度
 159   1       if(j>Len) //如果要读的字节数比实际接收到的数据长
 160   1       {
 161   2        j=Len;  //则只读指定的长度数据
 162   2       }
 163   1      #ifdef DEBUG1 //如果定义了DEBUG1，则需要显示调试信息
 164   1       Prints("读端点");
 165   1       PrintLongInt(Endp/2); //端点号。由于D12特殊的端点组织形式，
 166   1                             //这里的0和1分别表示端点0的输出和输入；
 167   1                             //而2、3分别表示端点1的输出和输入；
 168   1                             //3、4分别表示端点2的输出和输入。
 169   1                             //因此要除以2才显示对应的端点。
 170   1       Prints("缓冲区");
 171   1       PrintLongInt(j);      //实际读取的字节数
 172   1       Prints("字节。\r\n");
 173   1      #endif
 174   1       for(i=0;i<j;i++)
 175   1       {
 176   2        //这里不直接调用读一字节的函数，而直接在这里模拟时序，可以节省时间
 177   2        D12ClrRd();  //RD置低
 178   2        *(Buf+i)=D12GetData(); //读一字节数据
C51 COMPILER V9.56.0.0   PDIUSBD12                                                         09/17/2017 22:48:44 PAGE 4   

 179   2        D12SetRd();  //RD置高
 180   2      #ifdef DEBUG1
 181   2        PrintHex(*(Buf+i)); //如果需要显示调试信息，则显示读到的数据
 182   2        if(((i+1)%16)==0)Prints("\r\n"); //每16字节换行一次
 183   2      #endif
 184   2       }
 185   1      #ifdef DEBUG1
 186   1       if((j%16)!=0)Prints("\r\n"); //换行。
 187   1      #endif
 188   1       return j; //返回实际读取的字节数。
 189   1      }
 190          ////////////////////////End of function//////////////////////////////
 191          
 192          /********************************************************************
 193          函数功能：使能发送端点缓冲区数据有效的函数。
 194          入口参数：无。
 195          返    回：无。
 196          备    注：只有使用该函数使能发送端点数据有效之后，数据才能发送出去。
 197          ********************************************************************/
 198          void D12ValidateBuffer(void)
 199          {
 200   1       D12WriteCommand(D12_VALIDATE_BUFFER);
 201   1      }
 202          ////////////////////////End of function//////////////////////////////
 203          
 204          /********************************************************************
 205          函数功能：将数据写入端点缓冲区函数。
 206          入口参数：Endp：端点号；Len：需要发送的长度；Buf：保存数据的缓冲区。
 207          返    回：Len的值。
 208          备    注：无。
 209          ********************************************************************/
 210          uint8 D12WriteEndpointBuffer(uint8 Endp,uint8 Len,uint8 * Buf)
 211          {
 212   1       uint8 i;
 213   1       D12SelectEndpoint(Endp); //选择端点
 214   1       D12WriteCommand(D12_WRITE_BUFFER); //写Write Buffer命令
 215   1       D12WriteByte(0); //该字节必须写0
 216   1       D12WriteByte(Len);  //写需要发送数据的长度
 217   1       
 218   1      #ifdef DEBUG1 //如果定义了DEBUG1，则需要显示调试信息
 219   1       Prints("写端点");
 220   1       PrintLongInt(Endp/2); //端点号。由于D12特殊的端点组织形式，
 221   1                             //这里的0和1分别表示端点0的输出和输入；
 222   1                             //而2、3分别表示端点1的输出和输入；
 223   1                             //3、4分别表示端点2的输出和输入。
 224   1                             //因此要除以2才显示对应的端点。
 225   1       Prints("缓冲区");
 226   1       PrintLongInt(Len);    //写入的字节数
 227   1       Prints("字节。\r\n");
 228   1      #endif
 229   1       D12SetPortOut(); //将数据口设置为输出状态（注意这里为空宏，移植时可能有用）
 230   1       for(i=0;i<Len;i++)
 231   1       {
 232   2        //这里不直接调用写一字节的函数，而直接在这里模拟时序，可以节省时间
 233   2        D12ClrWr(); //WR置低
 234   2        D12SetData(*(Buf+i)); //将数据放到数据线上
 235   2        D12SetWr();  //WR置高，完成一字节写
 236   2      #ifdef DEBUG1
 237   2        PrintHex(*(Buf+i));  //如果需要显示调试信息，则显示发送的数据
 238   2        if((i+1)%16==0)Prints("\r\n"); //每16字节换行一次
 239   2      #endif
 240   2        }
C51 COMPILER V9.56.0.0   PDIUSBD12                                                         09/17/2017 22:48:44 PAGE 5   

 241   1      #ifdef DEBUG1
 242   1       if((Len%16)!=0)Prints("\r\n"); //换行
 243   1      #endif
 244   1       D12SetPortIn(); //数据口切换到输入状态
 245   1       D12ValidateBuffer(); //使端点数据有效
 246   1       return Len; //返回Len
 247   1      }
 248          ////////////////////////End of function//////////////////////////////
 249          
 250          /********************************************************************
 251          函数功能：设置地址函数。
 252          入口参数：Addr：要设置的地址值。
 253          返    回：无。
 254          备    注：无。
 255          ********************************************************************/
 256          void D12SetAddress(uint8 Addr)
 257          {
 258   1       D12WriteCommand(D12_SET_ADDRESS_ENABLE); //写设置地址命令
 259   1       D12WriteByte(0x80 | Addr); //写一字节数据：使能及地址
 260   1      }
 261          ////////////////////////End of function//////////////////////////////
 262          
 263          /********************************************************************
 264          函数功能：使能端点函数。
 265          入口参数：Enable: 是否使能。0值为不使能，非0值为使能。
 266          返    回：无。
 267          备    注：无。
 268          ********************************************************************/
 269          void D12SetEndpointEnable(uint8 Enable)
 270          {
 271   1       D12WriteCommand(D12_SET_ENDPOINT_ENABLE);
 272   1       if(Enable!=0)
 273   1       {
 274   2        D12WriteByte(0x01); //D0为1使能端点
 275   2       }
 276   1       else
 277   1       {
 278   2        D12WriteByte(0x00); //不使能端点
 279   2       }
 280   1      }
 281          ////////////////////////End of function//////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    445    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
